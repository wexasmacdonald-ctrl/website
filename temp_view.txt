// Restored email handler (compatible with your previous setup)<LF>// POST /api/notify-lead with JSON: { name, email, message }<LF>// Env vars used:<LF>// - RESEND_API_KEY (required)<LF>// - EMAIL_TO (optional, default campbell@macdonaldautomation.com)<LF>// - RESEND_FROM or EMAIL_FROM (optional, default "MacDonald AI <onboarding@resend.dev>")<LF>// - RESEND_AUTOREPLY or EMAIL_AUTOREPLY (optional, default true)<LF><LF>type Req = { method: string; headers: any; body?: any } & Record<string, any><LF>type Res = { status: (n: number) => Res; json: (b: any) => void; setHeader: (k: string, v: string) => void; send: (b: any) => void; end: () => void }<LF><LF>export default async function handler(req: Req, res: Res) {<LF>  // CORS<LF>  res.setHeader('Access-Control-Allow-Origin', '*')<LF>  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS')<LF>  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization')<LF>  if (req.method === 'OPTIONS') return res.status(200).end()<LF>  if (req.method !== 'POST') { res.setHeader('Allow', 'POST, OPTIONS'); return res.status(405).send('Method Not Allowed') }<LF><LF>  try {<LF>    // Parse JSON body<LF>    let body = req.body<LF>    if (typeof body === 'string') { try { body = JSON.parse(body) } catch { body = {} } }<LF>    const name = String(body?.name || '').trim()<LF>    const email = String(body?.email || '').trim()<LF>    const message = String(body?.message || '').trim()<LF><LF>    const apiKey = process.env.RESEND_API_KEY<LF>    if (!apiKey) return res.status(500).json({ error: 'Missing RESEND_API_KEY' })<LF><LF>    const to = process.env.EMAIL_TO || 'campbell@macdonaldautomation.com'<LF>    const from = process.env.EMAIL_FROM || process.env.RESEND_FROM || 'MacDonald AI <onboarding@resend.dev>'<LF>    const autoReplyEnabled = normalizeBool(process.env.EMAIL_AUTOREPLY ?? process.env.RESEND_AUTOREPLY ?? 'true')<LF>    const replyTo = isEmail(email) ? email : undefined<LF><LF>    const subject = `New lead from ${name || 'Website'}`<LF>    const html = htmlWrap(`<LF>      <h2 style="margin:0 0 8px 0;">New Lead</h2><LF>      <p style="margin:4px 0;"><strong>Name:</strong> ${escapeHtml(name)}</p><LF>      <p style="margin:4px 0;"><strong>Email:</strong> ${escapeHtml(email)}</p><LF>      <p style="margin:8px 0 4px 0;"><strong>Message:</strong></p><LF>      <pre style="white-space:pre-wrap;background:#f6f6f6;padding:12px;border-radius:8px;">${escapeHtml(message)}</pre><LF>    `)<LF><LF>    // Send notification<LF>    const notifyPayload = { from, to: [to], subject, html, text: `Name: ${name}\nEmail: ${email}\n\n${message}`, reply_to: replyTo }<LF>    let resp = await fetch('https://api.resend.com/emails', {<LF>      method: 'POST',<LF>      headers: { Authorization: `Bearer ${apiKey}`, 'Content-Type': 'application/json' },<LF>      body: JSON.stringify(notifyPayload),<LF>    })<LF>    let data: any = null<LF>    try { data = await resp.json() } catch { /* ignore */ }<LF>    if (!resp.ok) {<LF>      // Retry with fallback FROM if needed<LF>      const fallbackFrom = 'MacDonald AI <onboarding@resend.dev>'<LF>      if (notifyPayload.from !== fallbackFrom) {<LF>        resp = await fetch('https://api.resend.com/emails', {<LF>          method: 'POST',<LF>          headers: { Authorization: `Bearer ${apiKey}`, 'Content-Type': 'application/json' },<LF>          body: JSON.stringify({ ...notifyPayload, from: fallbackFrom }),<LF>        })<LF>        try { data = await resp.json() } catch { /* ignore */ }<LF>      }<LF>      if (!resp.ok) {<LF>        return res.status(500).json({ error: data?.message || 'Failed to send email' })<LF>      }<LF>    }<LF><LF>    // Non-blocking auto-reply<LF>    if (autoReplyEnabled && replyTo) {<LF>      const ackSubject = 'Thanks - we received your message'<LF>      const safeName = escapeHtml(name) || 'there'<LF>      const ackText = `Hi ${name || 'there'},\n\nThanks for reaching out to MacDonald AI. We received your message and will get back to you shortly.\n\n- MacDonald AI\n`<LF>      const ackHtml = htmlWrap(`<LF>        <p>Hi ${safeName},</p><LF>        <p>Thanks for reaching out to <strong>MacDonald AI</strong>. We received your message and will get back to you shortly.</p><LF>        <p style="margin:16px 0 4px 0;color:#666;">For your records:</p><LF>        <pre style="white-space:pre-wrap;background:#f6f6f6;padding:12px;border-radius:8px;">${escapeHtml(message)}</pre><LF>        <p style="margin-top:16px;">- MacDonald AI</p><LF>      `)<LF>      ;(async () => {<LF>        try {<LF>          await fetch('https://api.resend.com/emails', {<LF>            method: 'POST',<LF>            headers: { Authorization: `Bearer ${apiKey}`, 'Content-Type': 'application/json' },<LF>            body: JSON.stringify({ from, to: [email], subject: ackSubject, html: ackHtml, text: ackText, reply_to: to }),<LF>          })<LF>        } catch { /* ignore */ }<LF>      })()<LF>    }<LF><LF>    return res.status(200).json({ ok: true })<LF>  } catch (err: any) {<LF>    return res.status(500).json({ error: err?.message || 'Unexpected error' })<LF>  }<LF>}<LF><LF>function isEmail(v: string) { return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v) }<LF>function normalizeBool(v: any) { const s = String(v).toLowerCase(); return !(s === 'false' || s === '0' || s === '') }<LF>function escapeHtml(input: any) {<LF>  return String(input || '')<LF>    .replace(/&/g, '&amp;')<LF>    .replace(/</g, '&lt;')<LF>    .replace(/>/g, '&gt;')<LF>    .replace(/\"/g, '&quot;')<LF>    .replace(/'/g, '&#039;')<LF>}<LF>function htmlWrap(inner: string) {<LF>  return `<div style="font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial; line-height:1.5;">${inner}</div>`<LF>}<LF><LF>
